// Fig. 8.6: Time2Test.java
// Overloaded constructors used to initialize Time2 objects.
//time incremented by seconds, minutes, and hours
//David Persson
//CSIS 312-<B02>
//<Assignment1.2> 

public class Time2Test 
{
   public static void main(String[] args)
   {
	  System.out.println("David Persson : Assignment 1.2\n");
	   
      //Time2 t1 = new Time2(); // 00:00:00
      //Time2 t2 = new Time2(2); // 02:00:00
      //Time2 t3 = new Time2(21, 34); // 21:34:00
      Time2 t4 = new Time2(13, 42, 25); // 12:25:42
      //Time2 t5 = new Time2(t4); // 12:25:42
      
      System.out.println("Constructed with:");
      //displayTime("t1: all default arguments", t1);
     // displayTime("t2: hour specified; default minute and second", t2);
     // displayTime("t3: hour and minute specified; default second", t3);
      displayTime("t4: hour, minute and second specified", t4);
     // displayTime("t5: Time2 object t4 specified", t5);

      //add one second
		Time2.tickMethodSecond();
		displayTime("After calling tickMethodSecond", t4);
      
	  //add one minute
		Time2.tickMethodMinute();
		displayTime("After calling tickMethodMinute", t4);
		
		//add one hour
		Time2.tickMethodHour();
		displayTime("After calling tickMethodHour", t4);
		
		//creating a new time one second before midnight
		Time2 t7 = new Time2(23, 59, 59); // 11:59:59
		displayTime("t7: hour, minute and second specified one second before midnight", t7);
		 //add one second
		Time2.tickMethodSecond();
		displayTime("After calling tickMethodSecond", t7);
		
		//creating a new time one minute before midnight
		Time2 t8 = new Time2(23, 59, 00); // 11:59:00
		displayTime("t8: hour, minute and second specified one minute before midnight", t8);
		 //add one minute
		Time2.tickMethodMinute();
		displayTime("After calling tickMethodMinute", t8);
		
		//creating a new time one minute before midnight
		Time2 t9 = new Time2(23, 00, 00); // 11:00:00
		displayTime("t9: hour, minute and second specified one hour before midnight", t9);
		//add one hour
		Time2.tickMethodHour();
		displayTime("After calling tickMethodHour", t9);
		
		//creating a new time 11:40:01 P.M.
		Time2 t10 = new Time2(23, 40, 01); // 11:40:01 P.M.
		displayTime("t10: hour, minute and second specified 11:40:01 P.M.", t10);
		//add one hour
		Time2.tickMethodHour();
		displayTime("After calling tickMethodHour", t10);
		System.out.println("(The second and minutes are not lost)\n");
		
		//creating a new time 11:59:33 P.M.
		Time2 t11 = new Time2(23, 59, 33); // 11:59:33 P.M.
		displayTime("t11: hour, minute and second specified 11::59:53 P.M.", t11);
		//add one hour
		Time2.tickMethodMinute();
		displayTime("After calling tickMethodMinute", t11);
		System.out.println("(The seconds are not lost)\n");
      
      // attempt to initialize t6 with invalid values
      /*try
      {
         Time2 t6 = new Time2(27, 74, 99); // invalid values
      } 
      catch (IllegalArgumentException e)
      {
         System.out.printf("%nException while initializing t6: %s%n",
            e.getMessage());
      } */
   } 

   // displays a Time2 object in 24-hour and 12-hour formats
   private static void displayTime(String header, Time2 t)
   {
      System.out.printf("%s%n   %s%n   %s%n",
         header, t.toUniversalString(), t.toString());
   } 
} // end class Time2Test


/**************************************************************************
 * (C) Copyright 1992-2014 by Deitel & Associates, Inc. and               *
 * Pearson Education, Inc. All Rights Reserved.                           *
 *                                                                        *
 * DISCLAIMER: The authors and publisher of this book have used their     *
 * best efforts in preparing the book. These efforts include the          *
 * development, research, and testing of the theories and programs        *
 * to determine their effectiveness. The authors and publisher make       *
 * no warranty of any kind, expressed or implied, with regard to these    *
 * programs or to the documentation contained in these books. The authors *
 * and publisher shall not be liable in any event for incidental or       *
 * consequential damages in connection with, or arising out of, the       *
 * furnishing, performance, or use of these programs.                     *
 *************************************************************************/
