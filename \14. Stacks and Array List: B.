//David Persson
//CSIS 312-<B02>
//<Assignment8> 
//Modified from Fig. 20.9: StackTest.java from the textbook, pgs. 843-845.
public class StackTest 
{
	public static void main(String[] args)
	{
		System.out.println("David Persson : Assignment 8\n");
		
		String[] stringElements = {"Oh", "brother,", "where", "art", "thou?"};
		int[] integerElements = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
		
		//Create a Stack<String> and a Stack<Integer>
		Stack<String> stringStack = new Stack<>();
		Stack<Integer> integerStack = new Stack<>();
		
		testIsEmptyString(stringStack);//checks the size of stringStack
		//push elements ofstringElements onto stringStack
		testPushString(stringStack, stringElements);
		testSizeString(stringStack);//checks to see if stringStack is empty
		testIsEmptyString(stringStack);//checks the size of stringStack
		testPopString(stringStack);//pop from stringStack
		testIsEmptyString(stringStack);//checks to see if stringStack is empty
		
		System.out.println();
		
		testIsEmptyInteger(integerStack);//checks the size of stringStack
		//push elements of integerElements onto integerStack
		testPushInteger(integerStack, integerElements);
		testSizeInteger(integerStack);//checks the size of integerStack
		testIsEmptyInteger(integerStack);//checks the size of stringStack
		testPopInteger(integerStack);// pop from integerStack
		testIsEmptyInteger(integerStack);//checks the size of stringStack
	}

/************************************Methods for stringStack*******************************************************/
	
	//test push method with stringStack
	private static void testPushString(Stack<String> stack, String[] values)
	{
		System.out.printf("%nPushing elements onto stringStack:%n");
		
		//push elements to stack
		for (String value : values)
		{
			System.out.printf("%s ", value);
			stack.push(value); //push onto doubleStack
		}
	}
	
	//test pop method with stringStack
	private static void testPopString(Stack<String> stack)
	{
		//pop elements from stack
		try
		{
			System.out.printf("%nPopping elements from stringStack:%n");
			String popValue; //store element removed from stack
		
			//remove all elements from Stack
			while (true)
			{
				popValue = stack.pop();//pop from stringStack
				System.out.printf("%s ", popValue);
			}
		}
		catch(IndexOutOfBoundsException e){}
	}
	
	//test size method with stringStack
			private static void testSizeString(Stack<String> stack)
			{
				System.out.printf("%nSize of stringStack: %d", stack.size(stack));
			}
	
	//test isEmpty method with stringStack
			private static void testIsEmptyString(Stack<String> stack)
			{
				System.out.printf("%nIs the stringStack Empty? (T/F): %b", stack.isEmpty());
			}
	

/************************************Methods for integerStack*******************************************************/
			
	//test push method with integerStack
		private static void testPushInteger(Stack<Integer> stack, int[] values)
		{
			System.out.printf("%nPushing elements onto integerStack:%n");
			
			//push elements to stack
			for (int value : values)
			{
				System.out.printf("%d ", value);
				stack.push(value); //push onto integerStack
			}
		}
		
	//test size method with integerStack
		private static void testSizeInteger(Stack<Integer> stack)
		{
			System.out.printf("%nSize of integerStack: %d", stack.size(stack));
		}
		
	//test pop method with integer stack
		private static void testPopInteger(Stack<Integer> stack)
		{
			//pop elements from stack
			try
			{
				System.out.printf("%nPopping elements from integerStack:%n");
				int popValue; //store element removed from stack
			
				//remove all elements from Stack
				while (true)
				{
					popValue = stack.pop();//pop from intStack
					System.out.printf("%d ", popValue);
				}
			}
			catch(IndexOutOfBoundsException e){}
		}
	//test isEmpty method with stringStack
		private static void testIsEmptyInteger(Stack<Integer> stack)
		{
			System.out.printf("%nIs the integerStack Empty? (T/F): %b", stack.isEmpty());
		}
}
